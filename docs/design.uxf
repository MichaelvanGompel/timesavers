<diagram program="umletino" version="14.4.0-SNAPSHOT"><zoom_level>10</zoom_level><help_text>ke

a</help_text><element><id>UMLClass</id><coordinates><x>897</x><y>30</y><w>210</w><h>140</h></coordinates><panel_attributes>Board
--
height = int
--
load_cars()
do_move()</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>57</x><y>10</y><w>210</w><h>190</h></coordinates><panel_attributes>_Cars_
--
id = String
Horizontal = Bool
location = ()
length = int
redcar = Bool
--
move</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLNote</id><coordinates><x>437</x><y>0</y><w>430</w><h>490</h></coordinates><panel_attributes>key points
TODO
checken rood printen


INLADEN AUTO'S
lokatie auto -&gt; lokatie bord
op die plek zetten we ipv '_' 'car_id' en in de horizonatal/vertical direction

vanuit startpunt lengte - 1 tellen in de richting van de auto/vrachtwagen
m.a.w.  verticaal y + lengte -1 en horizontaal x + lengte - 1
verticaal gaat van boven naar beneden, horizontaal van links naar rechts  

HET SPEL

while true
PRINT BORD
ga alle lokaties/lengtes/orientaties langs

vraag move -&gt; auto + richting

CHECK MOVE:
auto's kunnen alleen bewegen naar de lege vakjes in juiste orientatie
illegale move als er een auto op de plek staat waar al een auto staat of buiten board
ALS illegaal print foute move + continue

DO MOVE
lokatie updaten ((horizontaal x +/-1, verticaal y +-1) + lengte - 1)


if won (rode auto lokatie + lengte -1 = size grid):
break




bg=blue</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLNote</id><coordinates><x>1127</x><y>20</y><w>380</w><h>220</h></coordinates><panel_attributes>Verbeterpunten: 

Board.py: load_cars functie 

Efficientere manier om auto te selecteren uit de grid 


TODO
key/value dictionary voor locaties</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLNote</id><coordinates><x>0</x><y>220</y><w>430</w><h>430</h></coordinates><panel_attributes>Random algoritme 
--
Randomize.py 

kiest auto uit auto's die kunnen bewegen,
stuurt random auto met random direction (uit twee) naar board.py

--
Board.py check_move functie:
bekijkt voor een individuele auto of deze een legitieme move heeft

do_move functie:
krijgt een auto met een legitieme move en voert deze uit

--
main.py: 
lijst auto's updaten elke ronde in de while True


can_move functie: een lijst maken en oude functie terug pakken, 
en dan bij can move, als er True uit komt voeg je de richting toe aan een lijst. 
Deze lijst zit gekoppeld aan een auto, en wordt steeds geupdate
</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLNote</id><coordinates><x>900</x><y>250</y><w>570</w><h>350</h></coordinates><panel_attributes>Breadth First Algoritme
--

# get current time

# initialize board 

# put intial gameboard in queue

 # add initial gameboard to archive

 # pop new board and path

 # if board is solved, return result

 # else add all possible boards to queue, if they're not in archive

cars_list  - &gt; cars_that_can
voor elke item cars_that_can do move -&gt; lijst met cars_listen -&gt; voor elke cars_list -&gt; newboard(cars_list) 
check of newboard in archief staat
zo nee:
new_board -&gt; archiveren
newboard appenden aan queue


</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLNote</id><coordinates><x>450</x><y>510</y><w>420</w><h>290</h></coordinates><panel_attributes>TO DO: 
--
Cars.py 

Do move 

-- 

Board.py

Checken of move valid is
Board kopieren 
</panel_attributes><additional_attributes></additional_attributes></element></diagram>